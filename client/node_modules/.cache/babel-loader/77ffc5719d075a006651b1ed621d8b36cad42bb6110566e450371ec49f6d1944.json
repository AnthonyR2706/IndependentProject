{"ast":null,"code":"var _jsxFileName = \"D:\\\\Other\\\\IndependentProject\\\\IndependentProject\\\\client\\\\src\\\\components\\\\ChannelSearch.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useChatContext } from \"stream-chat-react\";\nimport { ResultsDropdown } from \"./\";\nimport { SearchIcon } from \"../assets/SearchIcon.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChannelSearch = _ref => {\n  _s();\n  let {\n    setToggleContainer\n  } = _ref;\n  const {\n    client,\n    setActiveChannel\n  } = useChatContext();\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [teamChannels, setTeamChannels] = useState([]);\n  const [directChannels, setDirectChannels] = useState([]);\n  useEffect(() => {\n    if (!query) {\n      setTeamChannels([]);\n      setDirectChannels([]);\n    }\n  }, [query]);\n  const getChannels = async text => {\n    try {\n      const channelResponse = client.queryChannels({\n        type: \"team\",\n        name: {\n          $autocomplete: text\n        },\n        members: {\n          $in: [client.userID]\n        }\n      });\n      const userResponse = client.queryUsers({\n        id: {\n          $ne: client.userID\n        },\n        name: {\n          $autocomplete: text\n        }\n      });\n      const [channels, {\n        users\n      }] = await Promise.all([channelResponse, userResponse]);\n      if (channels.length) setTeamChannels(channels);\n      if (users.length) setDirectChannels(users);\n    } catch (error) {\n      setQuery('');\n    }\n  };\n  const onSearch = event => {\n    event.preventDefault();\n    setLoading(true);\n    setQuery(event.target.value);\n    getChannels(event.target.value);\n  };\n  const setChannel = channel => {\n    setQuery('');\n    setActiveChannel(channel);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"channelSearch\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channelSearchInput\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"channelSearchImj\",\n        children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"channelSearchInputText\",\n        placeholder: \"Search\",\n        type: \"text\",\n        value: query,\n        onChange: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), query && /*#__PURE__*/_jsxDEV(ResultsDropdown, {\n      teamChannels: teamChannels,\n      directChannels: directChannels,\n      loading: loading,\n      setChannel: setChannel,\n      setQuery: setQuery,\n      setToggleContainer: setToggleContainer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(ChannelSearch, \"8MS4ffuLD+JTR6AFOgkyxbd2B0w=\", false, function () {\n  return [useChatContext];\n});\n_c = ChannelSearch;\nexport default ChannelSearch;\nvar _c;\n$RefreshReg$(_c, \"ChannelSearch\");","map":{"version":3,"names":["React","useState","useEffect","useChatContext","ResultsDropdown","SearchIcon","jsxDEV","_jsxDEV","ChannelSearch","_ref","_s","setToggleContainer","client","setActiveChannel","query","setQuery","loading","setLoading","teamChannels","setTeamChannels","directChannels","setDirectChannels","getChannels","text","channelResponse","queryChannels","type","name","$autocomplete","members","$in","userID","userResponse","queryUsers","id","$ne","channels","users","Promise","all","length","error","onSearch","event","preventDefault","target","value","setChannel","channel","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","_c","$RefreshReg$"],"sources":["D:/Other/IndependentProject/IndependentProject/client/src/components/ChannelSearch.jsx"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport { useChatContext } from \"stream-chat-react\";\r\nimport {ResultsDropdown} from \"./\";\r\nimport {SearchIcon} from \"../assets/SearchIcon.js\";\r\n\r\nconst ChannelSearch = ({setToggleContainer}) => {\r\n    const {client, setActiveChannel} = useChatContext();\r\n    const [query, setQuery] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [teamChannels, setTeamChannels] = useState([]);\r\n    const [directChannels, setDirectChannels] = useState([]);\r\n    useEffect(() => {\r\n        if(!query){\r\n            setTeamChannels([])\r\n            setDirectChannels([])\r\n        }\r\n    }, [query])\r\n    const getChannels = async (text) => {\r\n        try {\r\n            const channelResponse = client.queryChannels({\r\n                type: \"team\", \r\n                name: {$autocomplete: text}, \r\n                members: {$in: [client.userID]}\r\n            });\r\n            const userResponse = client.queryUsers({\r\n                id: {$ne: client.userID},\r\n                name: {$autocomplete: text}\r\n            });\r\n            const [channels, {users}] = await Promise.all([channelResponse, userResponse]);\r\n            if(channels.length) setTeamChannels(channels);\r\n            if(users.length) setDirectChannels(users);\r\n        } catch (error) {\r\n            setQuery('')\r\n        }\r\n    }\r\n    const onSearch = (event) => {\r\n        event.preventDefault();\r\n        setLoading(true);\r\n        setQuery(event.target.value);\r\n        getChannels(event.target.value);\r\n    }\r\n\r\n    const setChannel = (channel) => {\r\n        setQuery('');\r\n        setActiveChannel(channel);\r\n    }\r\n \r\n    return (\r\n        <div className = \"channelSearch\">\r\n            <div className = \"channelSearchInput\">\r\n                <div className = \"channelSearchImj\">\r\n                    <SearchIcon/>\r\n                </div>\r\n                <input className = \"channelSearchInputText\" \r\n                placeholder = \"Search\"\r\n                type = \"text\"\r\n                value = {query}\r\n                onChange = {onSearch}>\r\n                </input>\r\n            </div>\r\n            {query && (\r\n                <ResultsDropdown\r\n                    teamChannels = {teamChannels}\r\n                    directChannels = {directChannels}\r\n                    loading = {loading}\r\n                    setChannel = {setChannel}\r\n                    setQuery = {setQuery}\r\n                    setToggleContainer = {setToggleContainer}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChannelSearch"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}